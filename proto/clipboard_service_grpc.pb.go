// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClipboardServiceClient is the client API for ClipboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClipboardServiceClient interface {
	CreateClipboards(ctx context.Context, in *CreateClipboardsRequest, opts ...grpc.CallOption) (*CreateClipboardsResponse, error)
	GetClipboards(ctx context.Context, in *GetClipboardsRequest, opts ...grpc.CallOption) (*GetClipboardsResponse, error)
	SubscribeClipboard(ctx context.Context, in *SubscribeClipboardRequest, opts ...grpc.CallOption) (ClipboardService_SubscribeClipboardClient, error)
	DeleteClipboards(ctx context.Context, in *DeleteClipboardsRequest, opts ...grpc.CallOption) (*DeleteClipboardsResponse, error)
}

type clipboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClipboardServiceClient(cc grpc.ClientConnInterface) ClipboardServiceClient {
	return &clipboardServiceClient{cc}
}

func (c *clipboardServiceClient) CreateClipboards(ctx context.Context, in *CreateClipboardsRequest, opts ...grpc.CallOption) (*CreateClipboardsResponse, error) {
	out := new(CreateClipboardsResponse)
	err := c.cc.Invoke(ctx, "/proto.ClipboardService/CreateClipboards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipboardServiceClient) GetClipboards(ctx context.Context, in *GetClipboardsRequest, opts ...grpc.CallOption) (*GetClipboardsResponse, error) {
	out := new(GetClipboardsResponse)
	err := c.cc.Invoke(ctx, "/proto.ClipboardService/GetClipboards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipboardServiceClient) SubscribeClipboard(ctx context.Context, in *SubscribeClipboardRequest, opts ...grpc.CallOption) (ClipboardService_SubscribeClipboardClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClipboardService_ServiceDesc.Streams[0], "/proto.ClipboardService/SubscribeClipboard", opts...)
	if err != nil {
		return nil, err
	}
	x := &clipboardServiceSubscribeClipboardClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClipboardService_SubscribeClipboardClient interface {
	Recv() (*ClipboardMessage, error)
	grpc.ClientStream
}

type clipboardServiceSubscribeClipboardClient struct {
	grpc.ClientStream
}

func (x *clipboardServiceSubscribeClipboardClient) Recv() (*ClipboardMessage, error) {
	m := new(ClipboardMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clipboardServiceClient) DeleteClipboards(ctx context.Context, in *DeleteClipboardsRequest, opts ...grpc.CallOption) (*DeleteClipboardsResponse, error) {
	out := new(DeleteClipboardsResponse)
	err := c.cc.Invoke(ctx, "/proto.ClipboardService/DeleteClipboards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClipboardServiceServer is the server API for ClipboardService service.
// All implementations must embed UnimplementedClipboardServiceServer
// for forward compatibility
type ClipboardServiceServer interface {
	CreateClipboards(context.Context, *CreateClipboardsRequest) (*CreateClipboardsResponse, error)
	GetClipboards(context.Context, *GetClipboardsRequest) (*GetClipboardsResponse, error)
	SubscribeClipboard(*SubscribeClipboardRequest, ClipboardService_SubscribeClipboardServer) error
	DeleteClipboards(context.Context, *DeleteClipboardsRequest) (*DeleteClipboardsResponse, error)
	mustEmbedUnimplementedClipboardServiceServer()
}

// UnimplementedClipboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClipboardServiceServer struct {
}

func (UnimplementedClipboardServiceServer) CreateClipboards(context.Context, *CreateClipboardsRequest) (*CreateClipboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClipboards not implemented")
}
func (UnimplementedClipboardServiceServer) GetClipboards(context.Context, *GetClipboardsRequest) (*GetClipboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClipboards not implemented")
}
func (UnimplementedClipboardServiceServer) SubscribeClipboard(*SubscribeClipboardRequest, ClipboardService_SubscribeClipboardServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeClipboard not implemented")
}
func (UnimplementedClipboardServiceServer) DeleteClipboards(context.Context, *DeleteClipboardsRequest) (*DeleteClipboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClipboards not implemented")
}
func (UnimplementedClipboardServiceServer) mustEmbedUnimplementedClipboardServiceServer() {}

// UnsafeClipboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClipboardServiceServer will
// result in compilation errors.
type UnsafeClipboardServiceServer interface {
	mustEmbedUnimplementedClipboardServiceServer()
}

func RegisterClipboardServiceServer(s grpc.ServiceRegistrar, srv ClipboardServiceServer) {
	s.RegisterService(&ClipboardService_ServiceDesc, srv)
}

func _ClipboardService_CreateClipboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClipboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipboardServiceServer).CreateClipboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClipboardService/CreateClipboards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipboardServiceServer).CreateClipboards(ctx, req.(*CreateClipboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClipboardService_GetClipboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClipboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipboardServiceServer).GetClipboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClipboardService/GetClipboards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipboardServiceServer).GetClipboards(ctx, req.(*GetClipboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClipboardService_SubscribeClipboard_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeClipboardRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClipboardServiceServer).SubscribeClipboard(m, &clipboardServiceSubscribeClipboardServer{stream})
}

type ClipboardService_SubscribeClipboardServer interface {
	Send(*ClipboardMessage) error
	grpc.ServerStream
}

type clipboardServiceSubscribeClipboardServer struct {
	grpc.ServerStream
}

func (x *clipboardServiceSubscribeClipboardServer) Send(m *ClipboardMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ClipboardService_DeleteClipboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClipboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipboardServiceServer).DeleteClipboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClipboardService/DeleteClipboards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipboardServiceServer).DeleteClipboards(ctx, req.(*DeleteClipboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClipboardService_ServiceDesc is the grpc.ServiceDesc for ClipboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClipboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClipboardService",
	HandlerType: (*ClipboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClipboards",
			Handler:    _ClipboardService_CreateClipboards_Handler,
		},
		{
			MethodName: "GetClipboards",
			Handler:    _ClipboardService_GetClipboards_Handler,
		},
		{
			MethodName: "DeleteClipboards",
			Handler:    _ClipboardService_DeleteClipboards_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeClipboard",
			Handler:       _ClipboardService_SubscribeClipboard_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/proto.proto",
}
